[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
dependencies = ["httpx", "pytest", "pytest-cov", "pytest-mock", "pydantic"]

name = "fpl"
dynamic = ["version"]
description = ''
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = []
authors = [{ name = "Sam King", email = "ag3nt.p0lyblnk@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
[project.urls]
Documentation = "https://github.com/agent-polyblank/fpl#readme"
Issues = "https://github.com/agent-polyblank/fpl#issues"
Source = "https://github.com/agent-polyblank/fpl"

[tool.hatch.version]
path = "src/fpl/__about__.py"

[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0"]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/python_project_template tests}"

[tool.coverage.run]
source_pkgs = ["fpl", "tests"]
branch = true
parallel = true
omit = ["src/fpl/__about__.py", "tests/*"]

[tool.coverage.paths]
python_project_template = ["src/fpl", "*/fpl/src/fpl"]
tests = ["tests", "*/fpl/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

[tool.hatch.envs.default]
installer = "uv"

[project.scripts]
fpl = "fpl.entry_points:main"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  ".venv",
  "venv",
  "tests",
]

# Same as Black.
line-length = 80
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = ["D203", "D212", "COM812", "ISC001"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# Allow pytest to pick up source directory.
[tool.pytest.ini_options]
pythonpath = [".", "src"]
