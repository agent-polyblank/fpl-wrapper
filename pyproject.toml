[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "fpl_wrapper"
dynamic = ["version"]
description = "Wrapper for the Fantasy Premier League API."
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
keywords = []
authors = [{ name = "Sam King", email = "ag3nt.p0lyblnk@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = ["httpx", "coverage[toml]", "pydantic"]

[tool.hatch.envs.default]
installer = "uv"

[project.urls]
Documentation = "https://github.com/agent-polyblank/fpl-wrapper#readme"
Issues = "https://github.com/agent-polyblank/fpl-wrapper#issues"
Source = "https://github.com/agent-polyblank/fpl-wrapper"

[tool.hatch.envs.test]
dependencies = ["pytest", "pytest-cov", "pytest-mock"]

[tool.hatch.version]
path = "src/fpl_wrapper/__about__.py"

[tool.hatch.envs.types]
extra-dependencies = ["mypy>=1.0.0"]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/python_project_template tests}"

[tool.coverage.run]
source_pkgs = ["fpl_wrapper", "tests"]
branch = true
parallel = true
omit = ["src/fpl_wrapper/__about__.py", "tests/*", "**/__init__.py"]

[tool.hatch.envs.test.scripts]
test = "pytest {args:tests}"
cov-xml = "pytest {args:tests} --cov=src/{{cookiecutter.cli_name}} --cov-report=xml:cov.xml"
cov-html = "pytest {args:tests} --cov=src/{{cookiecutter.cli_name}} --cov-report=html:htmlcov"

[tool.coverage.paths]
fpl_wrapper = ["src/fpl_wrapper", "*/fpl_wrapper/src/fpl_wrapper"]
tests = ["tests", "*/fpl_wrapper/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]


[project.scripts]
fpl_get_fixtures = "fpl_wrapper.entry_points:get_fixtures_entry"
fpl_get_league_data = "fpl_wrapper.entry_points:get_league_data_entry"
fpl_get_manager_gw_data = "fpl_wrapper.entry_points:get_manager_gw_data_entry"
fpl_get_players = "fpl_wrapper.entry_points:get_players_entry"
fpl_get_player = "fpl_wrapper.entry_points:get_player"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  ".venv",
  "venv",
  "tests",
  "__init__.py",
]

# Same as Black.
line-length = 80
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = ["D203", "D212", "COM812", "ISC001", "ANN101", "T203"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# Allow pytest to pick up source directory.
[tool.pytest.ini_options]
pythonpath = [".", "src"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "$major.$minor.$patch$prerelease"
version_files = ["src/commitizen_demo/__about__.py", "pyproject.toml:version"]
bump_message = "Bump $current_version â†’ $new_version [skip ci]" # when using CI to bump version skip commit
